
import numpy as N

from rccpy.utils.config import ConfigObject

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

PRECIP_ELEMENTS = ('pcpn',)
TEMPERATURE_ELEMENTS = ('dewpt','dewpt_depr','srad','st4i','st8i','temp')

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

elements = ConfigObject('elements',None)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# elements contains configuration parameters that MUST be set for each element
#
# description : detailed description of element
# raw_type : used to specify how the dat is stored in the data files - expressed
#            as a tuple (dtype, data units, missing value, frequency, interval)
#            frequency : observation frequency (time span e.g.'hour','day',etc.)
#            interval : number of time spans per data value
# serial_type : used to specify output data transforms for extracting data from 
#               hdf5 files via getSerialData() of HDF5DataFileManager an it's
#               subclasses : expressed as tuple (dtype, units, missing values)
# tsvar_type : used for extracting data using UCAN interface:
#              expressed as tuple (dtype, missing, units, tsv name, tsv units)
#              generated data elements do not have tsvar_type
# units : used expressed as tuple (hdf5 type, hdf5 units, script type, script units)
# value_type : used to convey character and limits of observed data values
#              expressed as tuple (data character, min reasonable value,
#                                  max reasonable value, data precision)
#              data character : linear = data may contain continuous decimal
#                                        values between whole numbers
#                               discrete = data must be integers
#                               direction = data expresse angles from 0 to 360
#              data precision : the number of decimal places to use when
#                               comparing values (use 0 for discrete types
#                               or to require integer directions)
#
# generated elements have the following paramaters :
#
# dependencies : tuple of names of elements used to generate element data
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# daily precipitation is generated from sum of all hourly observations
# 26. inches is maximum disaster planing volume of rain in one day
elements.daily_pcpn = {
        'dependencies' : ('pcpn',),
        'description'  : 'Total Precipitation for Day',
        'gen_type'     : (float, N.inf, 'in*100', '', ''),
        'raw_type'     : ('i2', 'in*100', -32768, 'day', 1),
        'serial_type'  : (float, 'in', N.inf),
        'units'        : (int, 'in*100', float, 'inch'),
        'value_type'   : ('linear', 0, 26., 3),
        }

# dew point (dewpt) data is generated from temp and rhum
# lowest dewpt recorded in US = -22F in Las Vegas 7/2/2007
# highest dewpt ever recorded = 95F in Saudi Arabia
elements.dewpt = {
        'dependencies' : ('rhum','temp',),
        'description'  : 'Dew Point (calculated from temp and rhum)',
        'gen_type'     : (float, N.inf, 'F*10', '', ''),
        'raw_type'     : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type'  : (float, 'F', N.inf),
        'units'        : (int, 'F', float, 'degF'),
        'value_type'   : ('linear', -25., 95., 1),
        }

# dew point depression (dewpt_depr) is generated by temp - dewpt
# dewpt cannot be more than temp so dewpt_depr should never be less than zero
# highest dewpt depression ever recorded in US = 129F in Las Vegas 7/2/2007
elements.dewpt_depr = {
        'dependencies' : ('dewpt','temp',),
        'description'  : 'Dewpoint Depression (temp-dewpt)',
        'gen_type'     : (float, N.inf, 'F*10', '', ''),
        'raw_type'     : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type'  : (float, 'F', N.inf),
        'units'        : (int, 'F', float, 'degF'),
        'value_type'   : ('linear', -50., 50., 1),
        }

# leaf wetness (lwet) is expressed as the number of minutes in an hour
elements.lwet = {
        'description' : 'Leaf Wetness',
        'raw_type'    : ('i2', 'minutes', -32768, 'hour', 1),
        'serial_type' : (float, 'minutes', N.inf),
        'tsvar_type'  : (float, N.inf, 'minutes', 'lwet', 'minutes'),
        'units'       : (int, 'minutes', float, 'minutes'),
        'value_type'  : ('discrete', 0, 60, 0),
        }

# hourly precipitation (pcpn) - we use maximum daily precip for lack of
# a better absolute measure
elements.pcpn = {
        'description' : 'Hourly Precipitation',
        'raw_type'    : ('i2', 'in*100', -32768, 'hour', 1),
        'serial_type' : (float, 'in', N.inf),
        'tsvar_type'  : (float, N.inf, 'in*100',  'prcp', 'inch'),
        'units'       : (int, 'in*100', float, 'inch'),
        'value_type'  : ('linear', 0, elements.daily_pcpn.value_type[2], 3),
        }

# relative humidity (rhum)
# lowest humidty set to 1 because 0 is impossible on Earth
elements.rhum = {
        'description' : 'Relative Humidity',
        'raw_type'    : ('i2', 'percent', -32768, 'hour', 1),
        'serial_type' : (float, 'percent', N.inf),
        'tsvar_type'  : (float, N.inf, 'percent', 'rhum', 'percent'),
        'units'       : (int, 'percent', float, 'percent'),
        'value_type'  : ('discrete', 1, 100, 0),
        }

# solar radiation (srad)
elements.srad = {
        'description' : 'Surface Radiation',
        'raw_type'    : ('i2', 'percent', -32768, 'hour', 1),
        'serial_type' : (float, 'langley', N.inf),
        'tsvar_type'  : (float, N.inf, 'langley*100', 'srad', 'langley'),
        'units'       : (int, 'langley*100', float, 'langley'),
        'value_type'  : ('linear', 0, N.inf, 2),
        }

# temperature of soil at depth of 4 inches depth (st4i)
elements.st4i = {
        'description' : 'Temperature of soil at depth of 4 inches depth',
        'raw_type'    : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type' : (float, 'F', N.inf),
        'tsvar_type'  : (float, N.inf, 'F*10', 'st4i', 'F'),
        'units'       : (int, 'F', float, 'degF'),
        'value_type'  : ('linear', -50., 130., 1),
        }

# temperature of soil at depth of 8 inches depth (st8i)
elements.st8i = {
        'description' : 'Temperature of soil at depth of 8 inches depth',
        'raw_type'    : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type' : (float, 'F', N.inf),
        'tsvar_type'  : (float, N.inf, 'F*10', 'st8i', 'F'),
        'units'       : (int, 'F', float, 'degF'),
        'value_type'  : ('linear', -50., 130., 1),
        }

# temperature (temp)
# extremes from lowest ever in Midwest to highest ever in Death Valley
elements.temp = {
        'description' : 'Temperature',
        'raw_type'    : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type' : (float, 'F', N.inf),
        'tsvar_type'  : (float, N.inf, 'F*10', 'temp', 'F'),
        'units'       : (int, 'F', float, 'degF'),
        'value_type'  : ('linear', -50., 130., 1),
        }

# wind direction (wdir)
elements.wdir = {
        'description' : 'Wind Direction',
        'raw_type'    : ('i2', 'degrees', -32768, 'hour', 1),
        'serial_type' : (float, 'degrees', N.inf),
        'tsvar_type'  : (float, N.inf, 'degrees', 'wdir', 'degrees'),
        'units'       : (int, 'degrees', float, 'degrees'),
        'value_type'  : ('direction', 0, 360, 0),
        }

# wind speed (wspd)
# extreme is highest onshore wind speed in Hurricane Katrina
elements.wspd = {
        'description' : 'Wind Speed',
        'raw_type'    : ('i2', 'mph', -32768, 'hour', 1),
        'serial_type' : (float, 'mph', N.inf),
        'tsvar_type'  : (float, N.inf, 'mph', 'wspd', 'miles/hour'),
        'units'       : (int, 'mph', float, 'miles/hour'),
        'value_type'  : ('discrete', 0, 130, 0),
        }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

extremes = ConfigObject('extremes',None)
extremes.stddevs = {
    'invalid' : {'daily_pcpn':10,'dewpt':7,'dewpt_depr':7,'lwet':7,'pcpn':10,
                 'rhum':7,'srad':7,'st4i':7,'st8i':7,'temp':7,'wdir':7,'wspd':7},
    'suspect' : {'daily_pcpn':7,'dewpt':4,'dewpt_depr':4,'lwet':4,'pcpn':7,
                 'rhum':4,'srad':4,'st4i':4,'st8i':4,'temp':4,'wdir':4,'wspd':4},
    }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sequences = ConfigObject('sequences',None)
sequences.filters = {
    'default' : ( ('x==x', '', 'identical values', str),
                  ('missing', '', 'missing values', 'missing'), ),
    'dewpt' : ( ('x==x', '', 'identical dew point values', lambda x:'%d' % x),
               ('missing', '', 'missing dew point values', 'missing'), ),
    'dewpt_depr' : ( ('x==x', '', 'identical dew point depression values', lambda x:'%d' % x),
               ('missing', '', 'missing dew point depression values', 'missing'), ),
    'lwet' : ( ('x==0', 'if run[0] == 0', 'leaf wetness == 0', '0'),
               ('0<X<60', 'if (run[0] > 0 and run[0] < 60)', '0 < leaf wetness < 60', lambda x:'%d' % x),
               ('x==60', 'if run[0] == 60', 'leaf wetness == 60', '60'),
               ('missing', '', 'missing values for leaf wetness', 'missing'), ),
    'pcpn' : ( ('x==0', 'if run[0] == 0', 'precipitation == 0', '0'),
               ('x>0', 'if run[0] > 0', 'precipitation > 0', lambda x:('%5.2f' % x).strip()),
               ('missing', '', 'missing precipitation values', 'missing'), ),
    'rhum' : ( ('0<x<100', 'if (run[0] > 0 and run[0] < 100)', '0 < humidity < 100', lambda x:'%d' % x),
               ('x==100', 'if run[0] == 100', 'humidity == 100', '100'),
               ('missing', '', 'missing values', 'missing'), ),
    'srad' : ( ('x==0', 'if run[0] == 0', 'surface radiation == 0', '0'),
               ('x>0', 'if run[0] > 0', 'surface radiation > 0', lambda x:('%5.2f' % x).strip()),
               ('missing', '', 'missing surface radiation values', 'missing'), ),
    'temp' : ( ('x==x', '', 'identical temperature values', lambda x:'%d' % x),
               ('missing', '', 'missing temperature values', 'missing'), ),
    'wdir' : ( ('x==x', '', 'identical wind directions', lambda x:'%d' % x),
               ('missing', '', 'missing wind directions values', 'missing'), ),
    'wspd' : ( ('x<5', 'if run[0] < 5', 'wind speed < 5', lambda x:'%d' % x),
               ('5<=x<10', 'if run[0] >= 5 and run[0] < 10', '5 <= wind speed < 10', lambda x:'%d' % x),
               ('x>=10', 'if run[0] >= 10', 'wind speed >= 10', lambda x:'%d' % x),
               ('missing', '', 'missing wind speed values', 'missing'), ),
    'zero' : ( ('x<0', 'if run[0] < 0', 'value < 0', str),
               ('x==0', 'if run[0] == 0', 'value == 0', '0'),
               ('x>0', 'if run[0] > 0', 'value > 0', str),
               ('missing', '', 'missing values', 'missing'), ),
    }
sequences.filters['st4i'] = sequences.filters['temp']
sequences.filters['st8i'] = sequences.filters['temp']

sequences.min_run_lengths = {'dewpt':2,'dewpt_depr':2,'lwet':2,'pcpn':2,
                             'rhum':2,'srad':2,'st4i':2,'st8i':2,'temp':2,
                             'wdir':2,'wspd':2}
sequences.stddevs = {
    'invalid' : {'dewpt':7,'dewpt_depr':7,'lwet':7,'pcpn':7,'rhum':7,'srad':7,
                 'st4i':7,'st8i':7,'temp':7,'wdir':7,'wspd':7},
    'suspect' : {'dewpt':4,'dewpt_depr':4,'lwet':4,'pcpn':4,'rhum':4,'srad':4,
                 'st4i':4,'st8i':4,'temp':4,'wdir':4,'wspd':4},
    }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

spikes = ConfigObject('spikes',None)
spikes.filters = {
      'dewpt' : (('x>0', 'if spike != 0', 'dew point spike > 0', str),),
      'dewpt_depr' : (('x>0', 'if spike != 0', 'dew point depression spike > 0', str),),
      'rhum' : (('x>0', 'if spike != 0', 'humidity spike > 0', str),),
      'srad' : (('x>0', 'if spike != 0', 'surface radiation spike > 0', str),),
      'temp' : (('x>0', 'if spike != 0', 'temperature spike > 0', str),),
      'wdir' : (('x>0', 'if spike != 0', 'wind direction spike > 0', str),),
      'wspd' : (('x>0', 'if spike != 0', 'wind speed spike > 0', str),),
     }
spikes.filters['st4i'] = spikes.filters['temp']
spikes.filters['st8i'] = spikes.filters['temp']

spikes.stddevs = {
    'invalid' : {'dewpt':7,'dewpt_depr':7,'lwet':7,'pcpn':10,'rhum':7,'srad':7,
                 'st4i':7,'st8i':7,'temp':7,'wdir':7,'wspd':7},
    'suspect' : {'dewpt':4,'dewpt_depr':4,'lwet':4,'pcpn':7,'rhum':4,'srad':4,
                 'st4i':4,'st8i':4,'temp':4,'wdir':4,'wspd':4},
    }

