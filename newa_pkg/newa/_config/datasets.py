
import numpy as N

from rccpy.utils.config import ConfigObject

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

PRECIP_ELEMENTS = ('pcpn',)
TEMPERATURE_ELEMENTS = ('dewpt','dewpt_depr','srad','st4i','st8i','temp')

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

datasets = ConfigObject('datasets',None)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# datasets contains configuration parameters that MUST be set for each dataset
#
# description : detailed description of dataset
# raw_type : used to specify how the dat is stored in the data files - expressed
#            as a tuple (dtype, data units, missing value, frequency, interval)
#            frequency : observation frequency (time span e.g.'hour','day',etc.)
#            interval : number of time spans per data value
# serial_type : used to specify output data transforms for extracting data from 
#               hdf5 files via getSerialData() of HDF5DataFileManager an it's
#               subclasses : expressed as tuple (dtype, units, missing values)
# tsvar_type : used for extracting data using UCAN interface:
#              expressed as tuple (dtype, missing, units, tsv name, tsv units)
#              generated data datasets do not have tsvar_type
# units : used expressed as tuple (hdf5 type, hdf5 units, script type, script units)
# value_type : used to convey character and limits of observed data values
#              expressed as tuple (data character, min reasonable value,
#                                  max reasonable value, data precision)
#              data character : linear = data may contain continuous decimal
#                                        values between whole numbers
#                               discrete = data must be integers
#                               direction = data expresse angles from 0 to 360
#              data precision : the number of decimal places to use when
#                               comparing values (use 0 for discrete types
#                               or to require integer directions)
#
# generated datasets have the following paramaters :
#
# dependencies : tuple of names of datasets used to generate data
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# daily precipitation is generated from sum of all hourly observations
# 26. inches is maximum disaster planing volume of rain in one day
datasets.daily_pcpn = {
        'dependencies' : ('pcpn',),
        'description'  : 'Total Precipitation for Day',
        'gen_type'     : (float, N.inf, 'in*100', '', ''),
        'raw_type'     : ('i2', 'in*100', -32768, 'day', 1),
        'serial_type'  : (float, 'in', N.inf),
        'units'        : (int, 'in*100', float, 'inch'),
        'value_type'   : ('linear', 0, 26., 3),
        }

# dew point (dewpt) data is generated from temp and rhum
# lowest dewpt recorded in US = -22F in Las Vegas 7/2/2007
# highest dewpt ever recorded = 95F in Saudi Arabia
datasets.dewpt = {
        'dependencies' : ('rhum','temp',),
        'description'  : 'Dew Point (calculated from temp and rhum)',
        'gen_type'     : (float, N.inf, 'F*10', '', ''),
        'raw_type'     : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type'  : (float, 'F', N.inf),
        'units'        : (int, 'F', float, 'degF'),
        'value_type'   : ('linear', -25., 95., 1),
        }

# dew point depression (dewpt_depr) is generated by temp - dewpt
# dewpt cannot be more than temp so dewpt_depr should never be less than zero
# highest dewpt depression ever recorded in US = 129F in Las Vegas 7/2/2007
datasets.dewpt_depr = {
        'dependencies' : ('dewpt','temp',),
        'description'  : 'Dewpoint Depression (temp-dewpt)',
        'gen_type'     : (float, N.inf, 'F*10', '', ''),
        'raw_type'     : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type'  : (float, 'F', N.inf),
        'units'        : (int, 'F', float, 'degF'),
        'value_type'   : ('linear', -50., 50., 1),
        }

# leaf wetness (lwet) is expressed as the number of minutes in an hour
datasets.lwet = {
        'description' : 'Leaf Wetness',
        'raw_type'    : ('i2', 'minutes', -32768, 'hour', 1),
        'serial_type' : (float, 'minutes', N.inf),
        'tsvar_type'  : (float, N.inf, 'minutes', 'lwet', 'minutes'),
        'units'       : (int, 'minutes', float, 'minutes'),
        'value_type'  : ('discrete', 0, 60., 0),
        }

# hourly precipitation (pcpn) - we use maximum daily precip for lack of
# a better absolute measure
datasets.pcpn = {
        'description' : 'Hourly Precipitation',
        'raw_type'    : ('i2', 'in*100', -32768, 'hour', 1),
        'serial_type' : (float, 'in', N.inf),
        'tsvar_type'  : (float, N.inf, 'in*100',  'prcp', 'inch'),
        'units'       : (int, 'in*100', float, 'inch'),
        'value_type'  : ('linear', 0, 26., 3),
        }

# relative humidity (rhum)
# lowest humidty set to 1 because 0 is impossible on Earth
datasets.rhum = {
        'description' : 'Relative Humidity',
        'raw_type'    : ('i2', 'percent', -32768, 'hour', 1),
        'serial_type' : (float, 'percent', N.inf),
        'tsvar_type'  : (float, N.inf, 'percent', 'rhum', 'percent'),
        'units'       : (int, 'percent', float, 'percent'),
        'value_type'  : ('discrete', 1, 100., 0),
        }

# solar radiation (srad)
datasets.srad = {
        'description' : 'Surface Radiation',
        'raw_type'    : ('i2', 'langley*100', -32768, 'hour', 1),
        'serial_type' : (float, 'langley', N.inf),
        'tsvar_type'  : (float, N.inf, 'langley*100', 'srad', 'langley'),
        'units'       : (int, 'langley*100', float, 'langley'),
        'value_type'  : ('linear', 0, N.inf, 2),
        }

# temperature of soil at depth of 4 inches depth (st4i)
datasets.st4i = {
        'description' : 'Temperature of soil at depth of 4 inches depth',
        'raw_type'    : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type' : (float, 'F', N.inf),
        'tsvar_type'  : (float, N.inf, 'F*10', 'st4i', 'F'),
        'units'       : (int, 'F', float, 'degF'),
        'value_type'  : ('linear', -50., 130., 1),
        }

# temperature of soil at depth of 8 inches depth (st8i)
datasets.st8i = {
        'description' : 'Temperature of soil at depth of 8 inches depth',
        'raw_type'    : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type' : (float, 'F', N.inf),
        'tsvar_type'  : (float, N.inf, 'F*10', 'st8i', 'F'),
        'units'       : (int, 'F', float, 'degF'),
        'value_type'  : ('linear', -50., 130., 1),
        }

# temperature (temp)
# extremes from lowest ever in Midwest to highest ever in Death Valley
datasets.temp = {
        'description' : 'Temperature',
        'raw_type'    : ('i2', 'F*10', -32768, 'hour', 1),
        'serial_type' : (float, 'F', N.inf),
        'tsvar_type'  : (float, N.inf, 'F*10', 'temp', 'F'),
        'units'       : (int, 'F', float, 'degF'),
        'value_type'  : ('linear', -50., 130., 1),
        }

# wind direction (wdir)
datasets.wdir = {
        'description' : 'Wind Direction',
        'raw_type'    : ('i2', 'degrees', -32768, 'hour', 1),
        'serial_type' : (float, 'degrees', N.inf),
        'tsvar_type'  : (float, N.inf, 'degrees', 'wdir', 'degrees'),
        'units'       : (int, 'degrees', float, 'degrees'),
        'value_type'  : ('direction', 0, 360, 0),
        }

# wind speed (wspd)
# extreme is highest onshore wind speed in Hurricane Katrina
datasets.wspd = {
        'description' : 'Wind Speed',
        'raw_type'    : ('i2', 'mph', -32768, 'hour', 1),
        'serial_type' : (float, 'mph', N.inf),
        'tsvar_type'  : (float, N.inf, 'mph', 'wspd', 'miles/hour'),
        'units'       : (int, 'mph', float, 'miles/hour'),
        'value_type'  : ('discrete', 0, 130, 0),
        }


